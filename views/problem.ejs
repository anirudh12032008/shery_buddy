<%- include ("./components/header.ejs") %>

<div class="flex w-[95vw] min-h-full">
  <div class="w-1/2">
    <h2 class="text-4xl mt-5 pl-10 font-bold my-3"><%= problem.title %></h2>
    <p class="pl-10"><strong>Difficulty:</strong> <%= problem.difficulty %></p>
    <p class="pl-10"><strong>Category:</strong> <%= problem.category %></p>
    <p class="pl-10"><strong>Points:</strong> <%= problem.points %></p>
    <button onclick="toggleHint()" class="hint-button pl-10 font-medium text-lg">Hint <i class="ri-arrow-down-s-line"></i> </button>
    <div id="hint" class="pl-10 hint-text" style="display: none;"><%= problem.hints %></div>
    
        <div><%- problem.statement %></div>
  </div>
  <div class="pt-5 w-1/2">
    <label class="" for="language">Select Language:</label>
    <select id="language">
      <% user.languages.forEach(function(language) { %>
      <option value="<%= language.toLowerCase() %>"><%= language %></option>
      <% }); %>
    </select>
    <div id="editor" class="h-[55vh]"></div>
    <button
      id="submitBtn"
      class="mt-1 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
    >
      Submit
    </button>

    <div>
      <div id="result" class="hidden mt-1 border-l-4 shadow-md p-4">
        <p class="text-xl font-medium">
          Results:
        </p>
<pre>
Test Cases:
<%= problem.tc1 %>
<%= problem.tc2 %>
</pre>
        <pre>
Expected Output:
<%= problem.tc1o %>
<%= problem.tc2o %>
      </pre>

        Output: 
          <pre><div id="out"></div></pre>
      </div>
    </div>
  </div>
</div>



<script
  src="https://cdn.jsdelivr.net/gh/MarketingPipeline/Code-Runner-Web-Component@main/dist/code-runner-wc.min.js"
  defer
></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/gsap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/1.18.0/TweenMax.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.2/underscore-min.js"></script>
<script>
  function toggleHint() {
    var hint = document.getElementById("hint");
    hint.style.display = (hint.style.display === "none" ? "block" : "none");
  }
function decodeEntities(str) {
  return str
}
  let pass;
  const sol = `<%= problem.tc1o %>
<%= problem.tc2o %>
`;
  require.config({
    paths: {
      vs: "https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.27.0/min/vs",
    },
  });
  require(["vs/editor/editor.main"], function () {
    var languageSelector = document.getElementById("language");
    var editor = monaco.editor.create(document.getElementById("editor"), {
      value: getDefaultCode(languageSelector.value),
      language: languageSelector.value,
      theme: "vs-dark",
    });

    languageSelector.addEventListener("change", function () {
      editor.setValue(getDefaultCode(languageSelector.value));
      monaco.editor.setModelLanguage(editor.getModel(), languageSelector.value);
    });

    document.getElementById("submitBtn").addEventListener("click", function () {
      var code = editor.getValue();
      code =
        code +
        `
fun(${decodeEntities('<%= problem.tc1 %>')})
fun(${decodeEntities('<%= problem.tc2 %>')})
# fun(<%= problem.tc2 %>)
      `;
      var postData = {
        script: code,
        language: "python3",
      };

      var url = "/execute";

      var options = {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(postData),
      };

      fetch(url, options)
        .then((response) => {
          if (!response.ok) {
            throw new Error("Network response was not ok");
          }
          return response.json();
        })
        .then((data) => {
          const box = document.getElementById("out");
          box.innerText = data.run.output;
          pass = sol == data.run.output;
          const resultbox = document.getElementById('result')
          resultbox.classList.remove('hidden')
          if (pass){
            resultbox.classList.add('border-green-500')
            resultbox.classList.add('bg-green-200')
          } else {
            resultbox.classList.add('border-red-500')
            resultbox.classList.add('bg-red-200')
          }
          fetch('/submit-solution', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ problemId: '<%= problem.id %>', pass: pass, points: "<%= problem.points %>" })
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return response.text();
  })
  .then(data => {
    console.log(data);
  })
  .catch(error => {
    console.error('There was a problem with the POST request:', error.message);
  });
        })
        .catch((error) => {
          console.error(
            "There was a problem with the POST request:",
            error.message
          );
        });
        
    });

    


    function getDefaultCode(language) {
      switch (language) {
        case "javascript":
          return `function fun(A){
    // Type your JavaScript code here...
}`;
        case "python":
          return `def fun(A):
    # Type your Python code here...`;
        case "java":
          return "// Type your Java code here...";
        default:
          return "// Type your Code here...";
      }
    }
    
  });

// Click "Congratulations!" to play animation


</script>

<%- include ("./components/footer.ejs") %>
